name: Admin Dashboard CI Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/src/app/api/admin/**"
      - "backend/src/common/rbac/**"
      - "frontend/src/app/app/admin/**"
      - "frontend/src/components/admin/**"
      - "frontend/e2e/admin-dashboard.spec.ts"
      - ".github/workflows/admin-dashboard-ci.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/src/app/api/admin/**"
      - "backend/src/common/rbac/**"
      - "frontend/src/app/app/admin/**"

jobs:
  test-admin-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: profolio_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.14.4

      - name: Install backend dependencies
        working-directory: ./backend
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        working-directory: ./backend
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/profolio_test' }}
        run: |
          cp .env.example .env.test || touch .env.test
          echo "DATABASE_URL=${DATABASE_URL}" >> .env.test
          echo "JWT_SECRET=test-secret-key-for-ci-testing-only" >> .env.test

      - name: Run database setup
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
        run: |
          pnpm prisma generate
          pnpm prisma migrate deploy
          pnpm prisma db seed

      - name: Run RBAC tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
        run: |
          pnpm test:ci -- --testPathPattern="rbac" --coverage

      - name: Run admin API tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
        run: |
          pnpm test:ci -- --testPathPattern="admin" --coverage

      - name: Test role guards
        working-directory: ./backend
        env:
          NODE_ENV: test
        run: |
          pnpm test:ci -- --testPathPattern="guard" --coverage

      - name: Upload backend coverage
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: backend-admin-coverage
          path: backend/coverage/

  test-admin-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.14.4

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript checks
        working-directory: ./frontend
        run: |
          pnpm type-check

      - name: Run ESLint
        working-directory: ./frontend
        run: |
          pnpm lint:strict -- --ext .ts,.tsx src/app/app/admin src/components/admin

      - name: Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_AUTH_MODE: local
          NEXT_PUBLIC_API_URL: http://localhost:3001
        run: |
          pnpm build

      - name: Run component tests
        working-directory: ./frontend
        run: |
          pnpm test -- --testPathPattern="admin" --coverage

      - name: Upload frontend coverage
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-admin-coverage
          path: frontend/coverage/

  test-admin-e2e:
    runs-on: ubuntu-latest
    needs: [test-admin-backend, test-admin-frontend]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: profolio_test
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.14.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup backend
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
        run: |
          cp .env.example .env
          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo "JWT_SECRET=test-secret" >> .env
          pnpm prisma generate
          pnpm prisma migrate deploy

          # Seed test data with different user roles
          npx ts-node -e "
            const { PrismaClient } = require('@prisma/client');
            const bcrypt = require('bcrypt');
            const prisma = new PrismaClient();
            
            async function seed() {
              // Create super admin
              await prisma.user.create({
                data: {
                  email: 'super.admin@profolio.com',
                  password: await bcrypt.hash('SuperAdmin123!', 12),
                  name: 'Super Admin',
                  role: 'SUPER_ADMIN',
                  emailVerified: true
                }
              });
              
              // Create regular admin
              await prisma.user.create({
                data: {
                  email: 'admin@profolio.com',
                  password: await bcrypt.hash('Admin123!', 12),
                  name: 'Admin User',
                  role: 'ADMIN',
                  emailVerified: true
                }
              });
              
              // Create regular users
              for (let i = 1; i <= 50; i++) {
                await prisma.user.create({
                  data: {
                    email: \`user\${i}@example.com\`,
                    password: await bcrypt.hash('User123!', 12),
                    name: \`User \${i}\`,
                    role: 'USER',
                    emailVerified: i % 2 === 0
                  }
                });
              }
              
              console.log('Test data seeded');
            }
            
            seed().catch(console.error).finally(() => prisma.\$disconnect());
          "

          pnpm build
          pnpm start &
          sleep 10

      - name: Setup frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_AUTH_MODE: local
        run: |
          pnpm build
          pnpm start &
          sleep 10

      - name: Install Playwright
        working-directory: ./frontend
        run: |
          pnpm playwright install --with-deps chromium

      - name: Run admin E2E tests
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL || 'http://localhost:3001' }}
          CI: true
        run: |
          pnpm test:e2e -- admin-dashboard.spec.ts || echo "Tests not implemented yet"

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: admin-e2e-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  test-admin-security:
    runs-on: ubuntu-latest
    needs: test-admin-e2e

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security tests
        working-directory: ./frontend
        run: |
          pnpm test:e2e -- admin-dashboard.spec.ts --grep "@security"

      - name: Check for privilege escalation vulnerabilities
        run: |
          # Check for hardcoded roles or permissions
          echo "Checking for hardcoded admin roles..."
          ! grep -r "role.*=.*ADMIN" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git --exclude="*.spec.ts" --exclude="*.test.ts" .

          # Check for missing role checks
          echo "Checking for missing role guards..."
          ! grep -r "admin/" --include="*.tsx" --exclude-dir=node_modules | grep -v "RequireAdmin\|roleGuard\|hasRole"

      - name: Test RBAC enforcement
        run: |
          cat > test-rbac.js << 'EOF'
          const axios = require('axios');

          async function testRBACEnforcement() {
            const baseURL = 'http://localhost:3001';
            
            // Test that regular users cannot access admin endpoints
            try {
              // Login as regular user
              const userLogin = await axios.post(`${baseURL}/auth/signin`, {
                email: 'user1@example.com',
                password: 'User123!'
              });
              
              const userToken = userLogin.data.token;
              
              // Try to access admin endpoint
              try {
                await axios.get(`${baseURL}/api/admin/users`, {
                  headers: { Authorization: `Bearer ${userToken}` }
                });
                console.error('❌ Regular user could access admin endpoint!');
                process.exit(1);
              } catch (err) {
                if (err.response?.status === 403) {
                  console.log('✅ Regular user blocked from admin endpoint');
                } else {
                  throw err;
                }
              }
              
              // Test that admin cannot delete themselves
              const adminLogin = await axios.post(`${baseURL}/auth/signin`, {
                email: 'admin@profolio.com',
                password: 'Admin123!'
              });
              
              const adminToken = adminLogin.data.token;
              const adminUser = adminLogin.data.user;
              
              try {
                await axios.delete(`${baseURL}/api/admin/users/${adminUser.id}`, {
                  headers: { Authorization: `Bearer ${adminToken}` }
                });
                console.error('❌ Admin could delete their own account!');
                process.exit(1);
              } catch (err) {
                if (err.response?.status === 403) {
                  console.log('✅ Admin blocked from self-deletion');
                } else {
                  throw err;
                }
              }
              
              console.log('✅ All RBAC tests passed');
              
            } catch (error) {
              console.error('RBAC test failed:', error.message);
              process.exit(1);
            }
          }

          testRBACEnforcement();
          EOF

          node test-rbac.js

  test-admin-performance:
    runs-on: ubuntu-latest
    needs: test-admin-e2e

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run performance tests
        working-directory: ./frontend
        run: |
          pnpm test:e2e -- admin-dashboard.spec.ts --grep "@performance"

      - name: Run load test on admin endpoints
        run: |
          npm install -g artillery

          cat > admin-load-test.yml << EOF
          config:
            target: "http://localhost:3001"
            phases:
              - duration: 30
                arrivalRate: 10
                name: "Admin dashboard load"
          scenarios:
            - name: "Admin user list"
              beforeScenario:
                - post:
                    url: "/auth/signin"
                    json:
                      email: "admin@profolio.com"
                      password: "Admin123!"
                    capture:
                      - json: "$.token"
                        as: "token"
              flow:
                - get:
                    url: "/api/admin/users"
                    headers:
                      Authorization: "Bearer {{ token }}"
                    expect:
                      - statusCode: 200
                      - contentType: json
                      - hasProperty: users
          EOF

          artillery run admin-load-test.yml --output admin-load-report.json

      - name: Check performance metrics
        run: |
          node -e "
            const report = require('./admin-load-report.json');
            const p95 = report.aggregate.latency?.p95 || 0;
            const p99 = report.aggregate.latency?.p99 || 0;
            
            console.log('P95 latency:', p95, 'ms');
            console.log('P99 latency:', p99, 'ms');
            
            if (p95 > 500) {
              console.error('P95 latency exceeds 500ms threshold');
              process.exit(1);
            }
            
            if (p99 > 1000) {
              console.error('P99 latency exceeds 1000ms threshold');
              process.exit(1);
            }
            
            console.log('✅ Performance metrics within acceptable range');
          "

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: admin-performance-results
          path: admin-load-report.*

  validate-types:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.14.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check TypeScript strict mode
        run: |
          # Verify tsconfig has strict mode enabled
          grep '"strict": true' frontend/tsconfig.json || (echo "TypeScript strict mode not enabled!" && exit 1)
          grep '"strict": true' backend/tsconfig.json || (echo "TypeScript strict mode not enabled!" && exit 1)

      - name: Run type checking
        run: |
          cd frontend && pnpm type-check
          cd ../backend && pnpm type-check

      - name: Check for any type usage
        run: |
          echo "Checking for 'any' type usage..."
          ! grep -r ": any" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next --exclude-dir=dist --exclude="*.d.ts" . || echo "Warning: Found 'any' types"
