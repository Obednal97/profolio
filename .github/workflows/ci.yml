name: 🧪 Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  test-backend:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: profolio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.14.4

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🎯 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📚 Install dependencies
        run: |
          cd backend
          pnpm install --frozen-lockfile

      - name: 📦 Cache Prisma Client
        uses: actions/cache@v4
        with:
          path: backend/node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('backend/prisma/schema.prisma', 'backend/package.json') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: 🗄️ Generate Prisma Client
        run: |
          cd backend
          pnpm prisma generate

      - name: 🔍 TypeScript check
        run: |
          cd backend
          pnpm run type-check
        continue-on-error: false # Still fail on type errors

      - name: 🧹 Lint check (warnings allowed)
        run: |
          cd backend
          pnpm run lint --max-warnings 100 || echo "⚠️ Lint warnings found (non-blocking)"
        continue-on-error: true # Don't fail on lint warnings

      - name: 🔒 Type Safety Check
        run: |
          node scripts/check-any-types.js --strict
        continue-on-error: false # STRICT MODE: Zero any types allowed!

      - name: 🗄️ Setup test database
        run: |
          cd backend
          pnpm prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test

      - name: 🧪 Run tests
        run: |
          cd backend
          pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
          JWT_SECRET: test-jwt-secret
          API_ENCRYPTION_KEY: test-encryption-key
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          RATE_LIMIT_ENABLED: true

      - name: 🛡️ Run RBAC tests
        run: |
          cd backend
          pnpm test:ci --testPathPattern="rbac" --coverage --passWithNoTests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
          JWT_SECRET: test-jwt-secret
          API_ENCRYPTION_KEY: test-encryption-key

      - name: 👨‍💼 Run admin API tests
        run: |
          cd backend
          pnpm test:ci --testPathPattern="admin" --coverage --passWithNoTests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
          JWT_SECRET: test-jwt-secret
          API_ENCRYPTION_KEY: test-encryption-key

      - name: 🚫 Run basic rate limiting tests
        run: |
          cd backend
          pnpm test:ci --testPathPattern="rate-limit.*\.spec\.ts$" --coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
          JWT_SECRET: test-jwt-secret
          API_ENCRYPTION_KEY: test-encryption-key
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          RATE_LIMIT_ENABLED: true

      - name: 📊 Test coverage
        run: |
          cd backend
          pnpm run test:cov
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
          JWT_SECRET: test-jwt-secret
          API_ENCRYPTION_KEY: test-encryption-key
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          RATE_LIMIT_ENABLED: true

  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: profolio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.14.4

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🎯 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📚 Install dependencies
        run: |
          cd frontend
          pnpm install --frozen-lockfile
          cd ../backend
          pnpm install --frozen-lockfile

      - name: 🗄️ Setup backend database
        run: |
          cd backend
          pnpm prisma generate
          pnpm prisma db push
          pnpm db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test

      - name: 🏗️ Build backend
        run: |
          cd backend
          pnpm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
          JWT_SECRET: test-jwt-secret
          API_ENCRYPTION_KEY: test-encryption-key-32-chars-ok

      - name: 🚀 Start backend server
        run: |
          cd backend
          nohup pnpm start > backend.log 2>&1 &
          echo $! > backend.pid
          echo "Backend PID: $(cat backend.pid)"

          # Wait for backend to be ready with better diagnostics
          echo "Waiting for backend to start..."
          for i in {1..45}; do
            # Check if process is still alive
            if ! kill -0 $(cat backend.pid) 2>/dev/null; then
              echo "❌ Backend process died. Logs:"
              cat backend.log
              exit 1
            fi
            
            if curl -f http://localhost:3001/api/health 2>/dev/null; then
              echo "✅ Backend is healthy and responding"
              break
            fi
            echo "Waiting for backend... (attempt $i/45)"
            sleep 2
          done

          # Final verification
          if ! curl -f http://localhost:3001/api/health; then
            echo "❌ Backend failed to start after 90 seconds. Logs:"
            cat backend.log
            echo "Process status:"
            ps aux | grep node || echo "No node processes found"
            echo "Port 3001 status:"
            netstat -tlnp | grep 3001 || echo "Port 3001 not listening"
            exit 1
          fi

          echo "✅ Backend is running and healthy"
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
          JWT_SECRET: test-jwt-secret
          API_ENCRYPTION_KEY: test-encryption-key-32-chars-ok
          PORT: 3001
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          RATE_LIMIT_ENABLED: true

      - name: 🔍 TypeScript check
        run: |
          cd frontend
          pnpm run type-check
        continue-on-error: false # Still fail on type errors

      - name: 🧹 Lint check (warnings allowed)
        run: |
          cd frontend
          pnpm run lint --max-warnings 100 || echo "⚠️ Lint warnings found (non-blocking)"
        continue-on-error: true # Don't fail on lint warnings

      - name: 🔒 Type Safety Check
        run: |
          node scripts/check-any-types.js --strict
        continue-on-error: false # STRICT MODE: Zero any types allowed!

      - name: 🎭 Install Playwright browsers
        run: |
          cd frontend
          pnpm exec playwright install --with-deps chromium

      - name: 🏗️ Build frontend for tests
        run: |
          cd frontend
          pnpm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_AUTH_MODE: local
          NODE_ENV: test

      # Don't create firebase-config.json since we're using local auth mode in CI

      - name: 🚀 Start frontend server
        run: |
          cd frontend
          nohup pnpm start > frontend.log 2>&1 &
          echo $! > frontend.pid
          sleep 10

          # Wait for frontend to be ready
          for i in {1..20}; do
            if curl -f http://localhost:3000 2>/dev/null; then
              echo "✅ Frontend is ready"
              break
            fi
            echo "Waiting for frontend... (attempt $i/20)"
            sleep 3
          done

          # Verify frontend is running
          if ! curl -f http://localhost:3000; then
            echo "❌ Frontend failed to start. Logs:"
            cat frontend.log
            exit 1
          fi
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_AUTH_MODE: local

      - name: 🧪 Run tests
        run: |
          cd frontend
          pnpm run test:ci
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_AUTH_MODE: local
          NODE_ENV: test
        if: always()

      - name: 📊 Upload test results on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: frontend-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
            frontend/frontend.log
          retention-days: 7

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  dependency-check:
    name: 📦 Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.14.4

      - name: 🔍 Audit backend dependencies
        run: |
          cd backend
          pnpm audit --audit-level=moderate

      - name: 🔍 Audit frontend dependencies
        run: |
          cd frontend
          pnpm audit --audit-level=moderate

      - name: 📊 Check for outdated packages
        run: |
          cd backend && pnpm outdated || true
          cd ../frontend && pnpm outdated || true

  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: profolio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.14.4

      - name: 📚 Install all dependencies
        run: |
          cd backend && pnpm install --frozen-lockfile
          cd ../frontend && pnpm install --frozen-lockfile

      - name: 🗄️ Setup database
        run: |
          cd backend
          pnpm prisma generate
          pnpm prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test

      - name: 📦 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            backend/dist
            backend/tsconfig.tsbuildinfo
            frontend/.next
            frontend/tsconfig.tsbuildinfo
            frontend/.swc
          key: ${{ runner.os }}-build-artifacts-${{ hashFiles('backend/src/**', 'frontend/src/**', 'frontend/package.json', 'backend/package.json', '**/tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-build-artifacts-

      - name: 🏗️ Build applications
        run: |
          cd backend && pnpm run build
          cd ../frontend && pnpm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
          JWT_SECRET: test-jwt-secret
          API_ENCRYPTION_KEY: test-encryption-key
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: 🚀 Start services
        run: |
          cd backend && pnpm run start &
          sleep 10
          cd frontend && pnpm start &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/profolio_test
          JWT_SECRET: test-jwt-secret
          API_ENCRYPTION_KEY: test-encryption-key
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: 🧪 Health check
        run: |
          curl -f http://localhost:3001/api/health || exit 1
          curl -f http://localhost:3000 || exit 1

  status-check:
    name: ✅ All Tests Passed
    runs-on: ubuntu-latest
    needs:
      [
        test-backend,
        test-frontend,
        security-scan,
        dependency-check,
        integration-test,
      ]
    if: always()

    steps:
      - name: ✅ Mark as successful
        if: ${{ needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' && needs.security-scan.result == 'success' && needs.dependency-check.result == 'success' && needs.integration-test.result == 'success' }}
        run: |
          echo "🎉 All CI checks passed!"

      - name: ❌ Mark as failed
        if: ${{ needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure' || needs.security-scan.result == 'failure' || needs.dependency-check.result == 'failure' || needs.integration-test.result == 'failure' }}
        run: |
          echo "❌ Some CI checks failed"
          exit 1
