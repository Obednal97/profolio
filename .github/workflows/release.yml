name: 🚀 Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.1)"
        required: true
        type: string

jobs:
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 Get version
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: 📋 Validate CHANGELOG
        run: |
          if ! grep -q "## \[${{ steps.get-version.outputs.version }}\]" CHANGELOG.md; then
            echo "❌ Version ${{ steps.get-version.outputs.version }} not found in CHANGELOG.md"
            echo "Please add an entry for this version in CHANGELOG.md"
            exit 1
          fi
          echo "✅ CHANGELOG.md contains entry for ${{ steps.get-version.outputs.version }}"

      - name: 📦 Validate package.json
        run: |
          PACKAGE_VERSION=$(grep '"version"' package.json | cut -d'"' -f4)
          if [[ "$PACKAGE_VERSION" != "${{ steps.get-version.outputs.version }}" ]]; then
            echo "❌ package.json version ($PACKAGE_VERSION) doesn't match release version (${{ steps.get-version.outputs.version }})"
            exit 1
          fi
          echo "✅ package.json version matches release version"

  build-assets:
    name: 🏗️ Build Release Assets
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.14.4

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🎯 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📚 Install dependencies
        run: |
          cd backend && pnpm install --frozen-lockfile
          cd ../frontend && pnpm install --frozen-lockfile

      - name: 🏗️ Build applications
        run: |
          cd backend && pnpm run build
          cd ../frontend && pnpm run build
        env:
          NEXT_PUBLIC_API_URL: /api

      - name: 📦 Create source archive
        run: |
          # Create clean source archive
          git archive --format=tar.gz --prefix=profolio-${{ needs.validate-release.outputs.version }}/ HEAD > profolio-${{ needs.validate-release.outputs.version }}-source.tar.gz

      - name: 📦 Create binary archive
        run: |
          # Create directory structure
          mkdir -p release/profolio-${{ needs.validate-release.outputs.version }}

          # Copy built applications
          cp -r backend release/profolio-${{ needs.validate-release.outputs.version }}/
          cp -r frontend release/profolio-${{ needs.validate-release.outputs.version }}/

          # Copy essential files
          cp README.md LICENSE CHANGELOG.md SECURITY.md CONTRIBUTING.md release/profolio-${{ needs.validate-release.outputs.version }}/
          cp install-or-update.sh release/profolio-${{ needs.validate-release.outputs.version }}/
          cp -r policies release/profolio-${{ needs.validate-release.outputs.version }}/
          cp -r docs release/profolio-${{ needs.validate-release.outputs.version }}/
          cp -r scripts release/profolio-${{ needs.validate-release.outputs.version }}/

          # Remove dev dependencies and build artifacts
          rm -rf release/profolio-${{ needs.validate-release.outputs.version }}/backend/node_modules
          rm -rf release/profolio-${{ needs.validate-release.outputs.version }}/frontend/node_modules
          rm -rf release/profolio-${{ needs.validate-release.outputs.version }}/frontend/.next

          # Create archive
          cd release
          tar -czf ../profolio-${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz profolio-${{ needs.validate-release.outputs.version }}

      - name: 🔐 Generate checksums
        run: |
          sha256sum profolio-${{ needs.validate-release.outputs.version }}-source.tar.gz > checksums.txt
          sha256sum profolio-${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz >> checksums.txt

      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            profolio-${{ needs.validate-release.outputs.version }}-source.tar.gz
            profolio-${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz
            checksums.txt

  test-installer:
    name: 🧪 Test Installer
    runs-on: ubuntu-latest
    needs: [validate-release, build-assets]

    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, debian-11]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧪 Test installer syntax
        run: |
          bash -n install-or-update.sh
          echo "✅ Installer syntax is valid"

      - name: 🔍 Test installer help
        run: |
          bash install-or-update.sh --help
          echo "✅ Installer help works"

  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-assets, test-installer]

    permissions:
      contents: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets

      - name: 📋 Extract changelog
        id: changelog
        run: |
          # Extract changelog section for this version
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Create release notes
          cat > release-notes.md << 'EOF'
          ## 🚀 Profolio ${{ needs.validate-release.outputs.version }}

          Professional Self-Hosted Portfolio Management System

          ### 📦 Installation

          **One-Command Installation:**
          ```bash
          bash -c "$(curl -fsSL https://raw.githubusercontent.com/Obednal97/profolio/main/install-or-update.sh)"
          ```

          **Manual Installation:**
          1. Download `profolio-${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz`
          2. Extract: `tar -xzf profolio-${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz`
          3. Run: `cd profolio-${{ needs.validate-release.outputs.version }} && sudo ./install-or-update.sh`

          ### 🔐 Security

          **SHA256 Checksums:**
          ```
          EOF

          cat checksums.txt >> release-notes.md

          cat >> release-notes.md << 'EOF'
          ```

          ### 📋 Changes

          EOF

          # Extract changelog section
          awk '/^## \['$VERSION'\]/,/^## \[|^$/ {
            if (/^## \['$VERSION'\]/) next
            if (/^## \[/ && !/^## \['$VERSION'\]/) exit
            print
          }' CHANGELOG.md >> release-notes.md

          cat >> release-notes.md << 'EOF'

          ### 🔗 Links

          - 📚 [Documentation](https://github.com/Obednal97/profolio#readme)
          - 🐛 [Report Issues](https://github.com/Obednal97/profolio/issues)
          - 💬 [Discussions](https://github.com/Obednal97/profolio/discussions)
          - 🤝 [Contributing](https://github.com/Obednal97/profolio/blob/main/CONTRIBUTING.md)

          ---

          **Full Changelog:** https://github.com/Obednal97/profolio/blob/main/CHANGELOG.md
          EOF

          echo "Release notes created"

      - name: 🎉 Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: "Profolio ${{ needs.validate-release.outputs.version }}"
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.validate-release.outputs.version, 'rc') || contains(needs.validate-release.outputs.version, 'beta') || contains(needs.validate-release.outputs.version, 'alpha') }}
          files: |
            profolio-${{ needs.validate-release.outputs.version }}-source.tar.gz
            profolio-${{ needs.validate-release.outputs.version }}-linux-x64.tar.gz
            checksums.txt
          token: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release]
    if: ${{ !contains(needs.validate-release.outputs.version, 'rc') && !contains(needs.validate-release.outputs.version, 'beta') && !contains(needs.validate-release.outputs.version, 'alpha') }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Update version references
        run: |
          # Update version in documentation if needed
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Update README badges or version references
          sed -i "s/version-[0-9.]*/version-$VERSION/g" README.md || true

          # Update any hardcoded version references
          find docs -name "*.md" -exec sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$VERSION/g" {} \; || true

      - name: 💾 Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          if git diff --quiet; then
            echo "No documentation updates needed"
          else
            git add .
            git commit -m "docs: update version references to ${{ needs.validate-release.outputs.version }}"
            git push
          fi

  notify-community:
    name: 📢 Notify Community
    runs-on: ubuntu-latest
    needs: [create-release]
    if: success()

    steps:
      - name: 🎉 Success notification
        run: |
          echo "🎉 Successfully released Profolio ${{ needs.validate-release.outputs.version }}"
          echo "📦 Release: https://github.com/Obednal97/profolio/releases/tag/${{ needs.validate-release.outputs.tag }}"

          # Add Discord/Slack/Email notifications here if desired
