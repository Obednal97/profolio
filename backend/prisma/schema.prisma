generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  taxCountry          String?
  taxRate             Int?
  createdAt           DateTime       @default(now())
  password            String
  updatedAt           DateTime       @default(now()) @updatedAt
  name                String?
  bio                 String?
  country             String?
  emailVerified       Boolean        @default(false)
  language            String?        @default("en")
  lastSignIn          DateTime?
  location            String?
  phone               String?
  photoURL            String?
  preferredCurrency   String?        @default("USD")
  provider            String?
  theme               String?        @default("system")
  timezone            String?        @default("UTC")
  role                UserRole       @default(USER)
  roleAssignedAt      DateTime?
  roleAssignedBy      String?
  // Stripe subscription fields
  stripeCustomerId    String?        @unique
  subscriptionId      String?        @unique
  subscriptionStatus  String?        // active, canceled, past_due, etc.
  subscriptionTier    String?        // cloud_monthly, cloud_annual
  subscriptionEndDate DateTime?
  trialEndDate        DateTime?
  apiKeys             ApiKey[]
  assets              Asset[]
  expenses            Expense[]
  liabilities         Liability[]
  notifications       Notification[]
  properties          Property[]
  assignedRoleChanges RoleChange[]   @relation("AdminRoleChanges")
  roleChanges         RoleChange[]   @relation("UserRoleChanges")
  settings            Settings?
  twoFactorAuth       TwoFactorAuth?
  passwordSetupTokens PasswordSetupToken[]
}

model RoleChange {
  id           String   @id @default(uuid())
  userId       String
  adminId      String
  previousRole UserRole
  newRole      UserRole
  reason       String?
  timestamp    DateTime @default(now())
  admin        User     @relation("AdminRoleChanges", fields: [adminId], references: [id], onDelete: Cascade)
  user         User     @relation("UserRoleChanges", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([adminId, timestamp])
  @@index([timestamp])
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String
  category        String
  createdAt       DateTime         @default(now())
  rolePermissions RolePermission[]

  @@index([category])
}

model RolePermission {
  id           String     @id @default(uuid())
  role         UserRole
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@index([role])
}

model Asset {
  id                 String             @id @default(uuid())
  userId             String
  name               String
  quantity           Decimal            @default(0) @db.Decimal(18, 8)
  source             String?
  externalId         String?
  valueOverride      Int?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  type               AssetType
  currency           String?
  symbol             String?
  autoSync           Boolean            @default(false)
  initialAmount      Int?
  interestRate       Int?
  interestType       InterestType?
  lastSyncedAt       DateTime?
  maturityDate       DateTime?
  paymentFrequency   PaymentFrequency?
  purchaseDate       DateTime?
  purchasePrice      Int?
  termLength         Int?
  current_value      Int?
  notes              String?
  vesting_end_date   DateTime?
  vesting_schedule   Json?
  vesting_start_date DateTime?
  symbolData         Symbol?            @relation("SymbolAssets", fields: [symbol], references: [symbol])
  user               User               @relation(fields: [userId], references: [id])
  transactions       AssetTransaction[]
  priceHistory       PriceHistory[]

  @@index([userId, type])
  @@index([symbol, type])
  @@index([userId, symbol])
  @@index([lastSyncedAt])
}

model PriceHistory {
  id         String   @id @default(uuid())
  assetId    String
  symbol     String
  price      Int
  timestamp  DateTime
  source     String
  asset      Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  symbolData Symbol   @relation("SymbolPriceHistory", fields: [symbol], references: [symbol])

  @@unique([assetId, timestamp, source])
  @@index([assetId, timestamp])
  @@index([symbol, timestamp])
  @@index([timestamp])
  @@index([symbol, timestamp, source])
  @@index([assetId, timestamp, price])
}

model AssetTransaction {
  id          String   @id @default(uuid())
  assetId     String
  type        String
  quantity    Int
  price       Int
  fees        Int?
  totalValue  Int
  date        DateTime
  description String?
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId, date])
  @@index([assetId, type, date])
  @@index([date])
}

model ApiKey {
  id                           String      @id @default(cuid())
  userId                       String
  provider                     ApiProvider
  isActive                     Boolean     @default(true)
  createdAt                    DateTime    @default(now())
  updatedAt                    DateTime    @updatedAt
  expiresAt                    DateTime?
  permissions                  String[]    @default([])
  rateLimitInfo                Json?
  testResult                   String?
  testedAt                     DateTime?
  user_api_key_display_name    String
  user_api_key_encrypted_value String
  user_api_key_environment     String      @default("production")
  user                         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, user_api_key_display_name])
  @@index([userId, provider, isActive])
  @@index([provider, isActive])
  @@map("ApiKey")
}

model MarketDataJob {
  id         String      @id @default(uuid())
  symbol     String
  provider   ApiProvider
  lastRun    DateTime?
  nextRun    DateTime
  isActive   Boolean     @default(true)
  errorCount Int         @default(0)
  lastError  String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt

  @@unique([symbol, provider])
  @@index([nextRun, isActive])
  @@index([provider, isActive])
}

model Liability {
  id           String    @id @default(uuid())
  userId       String
  name         String
  balance      Int
  interestRate Int
  dueDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([dueDate])
}

model Expense {
  id        String   @id @default(uuid())
  amount    Int
  category  String
  date      DateTime
  notes     String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, date])
  @@index([userId, category])
  @@index([date])
}

model Settings {
  userId    String   @id
  theme     String?
  currency  String?
  timezone  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Property {
  id                String    @id @default(uuid())
  address           String
  purchaseDate      DateTime?
  notes             String?
  userId            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  bathrooms         Decimal?  @db.Decimal(3, 1)
  bedrooms          Int?
  city              String?
  country           String?
  currentValue      Int?
  hoa               Int?
  insurance         Int?
  lotSize           Int?
  maintenanceCosts  Int?
  monthlyPayment    Int?
  monthlyRent       Int?
  mortgageAmount    Int?
  mortgageProvider  String?
  mortgageRate      Decimal?  @db.Decimal(5, 2)
  mortgageStartDate DateTime?
  mortgageTerm      Int?
  ownershipType     String?
  postalCode        String?
  propertyTaxes     Int?
  propertyType      String?
  purchasePrice     Int?
  region            String?
  rentalEndDate     DateTime?
  rentalIncome      Int?
  rentalStartDate   DateTime?
  securityDeposit   Int?
  squareFootage     Int?
  status            String?
  street            String?
  yearBuilt         Int?
  user              User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([propertyType])
  @@index([status])
  @@index([purchaseDate])
}

model Notification {
  id        String               @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean              @default(false)
  readAt    DateTime?
  priority  NotificationPriority @default(NORMAL)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now()) @updatedAt
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([createdAt])
  @@index([type, isRead])
}

model Symbol {
  id                 String         @id @default(uuid())
  symbol             String         @unique
  name               String
  type               AssetType
  exchange           String?
  sector             String?
  industry           String?
  market_cap         BigInt?
  current_price      Int?
  previous_close     Int?
  day_change         Int?
  day_change_percent Decimal?       @db.Decimal(10, 4)
  volume             BigInt?
  avg_volume         BigInt?
  last_updated       DateTime?
  added_at           DateTime       @default(now())
  is_active          Boolean        @default(true)
  update_priority    Int            @default(1)
  error_count        Int            @default(0)
  last_error         String?
  last_error_at      DateTime?
  assets             Asset[]        @relation("SymbolAssets")
  priceHistory       PriceHistory[] @relation("SymbolPriceHistory")

  @@index([symbol, is_active])
  @@index([type, is_active])
  @@index([last_updated, update_priority])
  @@index([update_priority, is_active])
}

model SymbolQueue {
  id            String     @id @default(uuid())
  symbol        String     @unique
  requested_by  String?
  asset_type    AssetType?
  priority      Int        @default(2)
  status        String     @default("PENDING")
  attempts      Int        @default(0)
  last_attempt  DateTime?
  error_message String?
  created_at    DateTime   @default(now())
  processed_at  DateTime?

  @@index([status, priority])
  @@index([created_at])
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum AssetType {
  CRYPTO
  STOCK
  PROPERTY
  EQUITY
  OTHER
  BOND
  SAVINGS
}

enum InterestType {
  SIMPLE
  COMPOUND
}

enum PaymentFrequency {
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum ApiProvider {
  ALPHA_VANTAGE
  TWELVE_DATA
  POLYGON_IO
  COINGECKO
  COINMARKETCAP
  BINANCE
  TRADING212
}

enum NotificationType {
  SYSTEM_UPDATE
  ASSET_SYNC
  MARKET_ALERT
  ACCOUNT_ACTIVITY
  EXPENSE_REMINDER
  PROPERTY_UPDATE
  API_KEY_EXPIRY
  GENERAL
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model TwoFactorAuth {
  id             String   @id @default(uuid())
  userId         String   @unique
  secret         String   // Encrypted TOTP secret
  enabled        Boolean  @default(false)
  verifiedAt     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  backupCodes    TwoFactorBackupCode[]
  
  @@index([userId, enabled])
}

model TwoFactorBackupCode {
  id             String   @id @default(uuid())
  twoFactorId    String
  code           String   // Hashed backup code
  usedAt         DateTime?
  createdAt      DateTime @default(now())
  
  twoFactor      TwoFactorAuth @relation(fields: [twoFactorId], references: [id], onDelete: Cascade)
  
  @@unique([twoFactorId, code])
  @@index([twoFactorId])
}

model TwoFactorVerification {
  id             String   @id @default(uuid())
  userId         String
  token          String   // Temporary verification token
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  
  @@index([token])
  @@index([userId, expiresAt])
}

model PasswordSetupToken {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique // Hashed token
  expiresAt   DateTime
  used        Boolean  @default(false)
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}
