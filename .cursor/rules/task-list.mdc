---
description: 
globs: 
alwaysApply: false
---
---
description: Guidelines for creating and managing project task lists in markdown files
ruleType: agentRequested
alwaysApply: false
---

# Task List Management

Guidelines for creating and managing task lists in markdown files to track project progress

## Task List Creation

1. Create task lists in a markdown file (in the project root):
   - Use `TASKS.md` or a descriptive name relevant to the feature (e.g., `ASSISTANT_CHAT.md`)
   - Include a clear title and description of the feature being implemented

2. Structure the file with these sections:
   ```markdown
   # Feature Name Implementation
   
   Brief description of the feature and its purpose.
   
   ## Completed Tasks
   
   - [x] Task 1 that has been completed
   - [x] Task 2 that has been completed
   
   ## In Progress Tasks
   
   - [ ] Task 3 currently being worked on
   - [ ] Task 4 to be completed soon
   
   ## Future Tasks
   
   - [ ] Task 5 planned for future implementation
   - [ ] Task 6 planned for future implementation
   
   ## Implementation Plan
   
   Detailed description of how the feature will be implemented.
   
   ### Relevant Files
   
   - path/to/file1.ts - Description of purpose
   - path/to/file2.ts - Description of purpose
   ```

## Task List Maintenance

1. Update the task list as you progress:
   - Mark tasks as completed by changing `[ ]` to `[x]`
   - Add new tasks as they are identified
   - Move tasks between sections as appropriate

2. Keep "Relevant Files" section updated with:
   - File paths that have been created or modified
   - Brief descriptions of each file's purpose
   - Status indicators (e.g., ✅) for completed components

3. Add implementation details:
   - Architecture decisions
   - Data flow descriptions
   - Technical components needed
   - Environment configuration

## AI Instructions

When working with task lists, the AI should:

1. **Before starting work:**
   - Check which task to implement next from the "In Progress Tasks" section
   - Review the implementation plan and relevant files section
   - Understand the overall feature context

2. **During implementation:**
   - Regularly update the task list file after implementing significant components
   - Add new tasks discovered during implementation to the appropriate section
   - Update the "Relevant Files" section with accurate file paths and descriptions
   - Document architecture decisions and technical components as they are created

3. **After completing tasks:**
   - Mark completed tasks with [x] and move them to "Completed Tasks" section
   - Update file descriptions and status indicators (e.g., ✅) for completed components
   - Add implementation details, especially for complex features
   - Move tasks between sections as their status changes

4. **Task management best practices:**
   - Keep the task list as a living document that reflects current project state
   - Break down large tasks into smaller, manageable subtasks when needed
   - Maintain clear task descriptions with acceptance criteria when possible
   - Use the task list to provide context in conversations about the feature

5. **File organisation:**
   - Ensure file paths in "Relevant Files" are accurate and up-to-date
   - Include brief but descriptive explanations of each file's purpose
   - Note any dependencies between files or components

## Example Task Update

When updating a task from "In Progress" to "Completed":

```markdown
## In Progress Tasks

- [ ] Implement database schema
- [ ] Create API endpoints for data access

## Completed Tasks

- [x] Set up project structure
- [x] Configure environment variables
```

Should become:

```markdown
## In Progress Tasks

- [ ] Create API endpoints for data access

## Completed Tasks

- [x] Set up project structure
- [x] Configure environment variables
- [x] Implement database schema
```