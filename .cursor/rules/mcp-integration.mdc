---
description: Guidelines for integrating and using Model Context Protocol (MCP) servers
ruleType: agentRequested
alwaysApply: false
---

# MCP Integration Guidelines

Model Context Protocol (MCP) servers provide extended capabilities to Cursor through standardised interfaces.

## Available MCP Categories

### Database Integration

- **Postgres MCP**: Direct database queries and schema inspection
- **MongoDB MCP**: Document database operations
- **Redis MCP**: Caching and session management

### External Services

- **GitHub MCP**: Repository management and API integration
- **Resend MCP**: Email sending capabilities
- **Supabase MCP**: Backend-as-a-service integration
- **Neon MCP**: Serverless database management

### Development Tools

- **Bucket MCP**: Cloud storage operations
- **Upstash MCP**: Edge database and messaging

## Implementation Guidelines

### MCP Server Configuration

```json
{
  "mcpServers": {
    "postgres": {
      "command": "npx",
      "args": ["@modelcontextprotocol/server-postgres"],
      "env": {
        "POSTGRES_CONNECTION_STRING": "postgresql://user:pass@localhost:5432/db"
      }
    },
    "github": {
      "command": "npx",
      "args": ["@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "your_token_here"
      }
    }
  }
}
```

### Usage Patterns

#### Database Operations

When working with database schemas or queries:

- Use the appropriate MCP server for direct database interaction
- Leverage schema inspection capabilities
- Execute queries safely through MCP interfaces

#### External API Integration

For third-party service integration:

- Prefer MCP servers over direct API calls when available
- Use standardised MCP interfaces for consistent error handling
- Leverage built-in authentication and rate limiting

## Security Considerations

### Environment Variables

- Store all sensitive credentials in environment variables
- Never commit MCP configuration with hardcoded secrets
- Use project-specific environment files

### Access Control

- Limit MCP server permissions to minimum required scope
- Regularly rotate API tokens and credentials
- Monitor MCP server logs for unusual activity

## Profolio-Specific MCP Usage

### Database Management

```typescript
// Use Postgres MCP for schema operations
// Direct integration with our PostgreSQL database
// Schema inspection and migration assistance
```

### Authentication

```typescript
// GitHub MCP for repository operations
// User authentication and authorisation flows
// Integration with NextAuth providers
```

### File Storage

```typescript
// Bucket MCP for portfolio document storage
// Secure file upload and retrieval
// Asset management for portfolio images
```

## Best Practices

1. **Incremental Adoption**: Start with one MCP server and expand gradually
2. **Error Handling**: Implement robust error handling for MCP operations
3. **Performance**: Monitor MCP server response times and optimise accordingly
4. **Documentation**: Document MCP server configurations and usage patterns
5. **Testing**: Include MCP operations in integration tests

## Troubleshooting

### Common Issues

- **Connection Errors**: Verify environment variables and network connectivity
- **Authentication Failures**: Check API tokens and permissions
- **Performance Issues**: Monitor server logs and connection pooling

### Debugging

- Enable MCP server logging for detailed diagnostics
- Use Cursor's MCP debugging tools
- Test MCP operations independently before integration
